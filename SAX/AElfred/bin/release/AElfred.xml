<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AElfred</name>
    </assembly>
    <members>
        <member name="T:AElfred.IContentModelHandler">
            <summary>
            Handler to allow the parser to pass information about each content model. This 
            information should be reported before any ElementDecl callbacks. Additionally,
            The information is designed to allow the correct nesting of entity boundaries.
            </summary>
        </member>
        <member name="M:AElfred.IContentModelHandler.StartContentModel(System.String)">
            <summary>
            The start of a content model. For every content model this event must be reported.
            </summary>
            <param name="name">The name of the element that is associated with this content model.</param>    
        </member>
        <member name="M:AElfred.IContentModelHandler.EndContentModel">
            <summary>
            The end of a content model. For every legal content model this event must be reported.
            If an error occurs before the end of the content model is reached, this event is not called.
            </summary>
        </member>
        <member name="M:AElfred.IContentModelHandler.Empty">
            <summary>
            The content model is "EMPTY".
            </summary>
        </member>
        <member name="M:AElfred.IContentModelHandler.Any">
            <summary>
            The content model is "ANY".
            </summary>
        </member>
        <member name="M:AElfred.IContentModelHandler.StartGroup">
            <summary>
            The start of a group (i.e., a "(" was encountered).
            </summary>
        </member>
        <member name="M:AElfred.IContentModelHandler.EndGroup(System.Char)">
            <summary>
            The end of a group (i.e., a ")" was encountered).
            </summary>
            <param name="occurences">The occurence indicator associated with the group. This 
            character can be "+", "*", "?" or "\0" in the case of no occurence indicator. </param>
        </member>
        <member name="M:AElfred.IContentModelHandler.Sequence">
            <summary>
            The current content model group is a sequence. This event is fired for every "," that 
            occurs in the model. If no ",", "|", or "#PCDATA" occurs within a group,
            the group is assumed to be a sequence, but this event is not fired.
            </summary>
        </member>
        <member name="M:AElfred.IContentModelHandler.Choice">
            <summary>
            The current content model group is a choice. This event is fired for every "|" that 
            occurs in the model. If no ",", "|", or "#PCDATA" occurs within a group,
            the group is assumed to be a sequence. In the case of a mixed declaration, a Choice()
            event is fired for every occurence of "|" in the mixed content model. This allows 
            better precision in determining entity boundaries.
            </summary>
        </member>
        <member name="M:AElfred.IContentModelHandler.Mixed">
            <summary>
            The current content model group is a mixed. This event is fired once for the
            content model where the "#PCDATA" declaration occurs. In the case of a mixed 
            declaration, a Choice() event is fired for every occurence of "|" in the mixed content 
            model. 
            </summary>
        </member>
        <member name="M:AElfred.IContentModelHandler.ElementParticle(System.String,System.Char)">
            <summary>
            An element particle was encountered within the current content model.
            </summary>
            <param name="name">The element particle name.</param>
            <param name="occurences">The occurence indicator associated with the element particle. 
            This character can be "+", "*", "?" or "\0" in the case of no occurence indicator. </param>
        </member>
        <member name="T:NamespaceSupport">
            <summary>
            Encapsulate Namespace logic for use by applications using SAX,
            or internally by SAX drivers.
            <blockquote>
            <em>This module, both source code and documentation, is in the
            Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
            See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>
            for further information.
            </blockquote>
            </summary>
        </member>
        <member name="F:NamespaceSupport.XMLNS">
            <summary>
            The XML Namespace URI as a constant.
            The value is <code>http://www.w3.org/XML/1998/namespace</code>
            as defined in the "Namespaces in XML"/// recommendation.
            <p>This is the Namespace URI that is automatically mapped
            to the "xml" prefix.</p>
            </summary>
        </member>
        <member name="F:NamespaceSupport.NSDECL">
            <summary>
            The namespace declaration URI as a constant.
            The value is <code>http://www.w3.org/2000/xmlns/</code>, as defined
            in a backwards-incompatible erratum to the "Namespaces in XML"
            recommendation.  Because that erratum postdated SAX2, SAX2 defaults 
            to the original recommendation, and does not normally use this URI.
            
            <p>This is the Namespace URI that is optionally applied to
            <em>xmlns</em> and <em>xmlns:*</em> attributes, which are used to
            declare namespaces.  </p>
            </summary>
        </member>
        <member name="F:NamespaceSupport.EMPTY_ARRAYLIST">
            <summary>
            An empty enumeration.
            </summary>
        </member>
        <member name="M:NamespaceSupport.#ctor">
            <summary>
            Create a new Namespace support object.
            </summary>
        </member>
        <member name="M:NamespaceSupport.Reset">
            <summary>
            Reset this Namespace support object for reuse.
            <p>It is necessary to invoke this method before reusing the
            Namespace support object for a new session.  If namespace
            declaration URIs are to be supported, that flag must also
            be set to a non-default value.
            </p>
            <see cref="P:NamespaceSupport.NamespaceDeclUris"/>
            </summary>
        </member>
        <member name="M:NamespaceSupport.PushContext">
             <summary>
             Start a new Namespace context. The new context will automatically inherit
             the declarations of its parent context, but it will also keep track of 
             which declarations were made within this context.
            
             <p>Event callback code should start a new context once per element.
             This means being ready to call this in either of two places.
             For elements that don't include namespace declarations, the
             <em>ContentHandler.startElement()</em> callback is the right place.
             For elements with such a declaration, it'd done in the first
             <em>ContentHandler.startPrefixMapping()</em> callback.
             A bool flag can be used to
             track whether a context has been started yet.  When either of
             those methods is called, it checks the flag to see if a new context
             needs to be started.  If so, it starts the context and sets the
             flag.  After <em>ContentHandler.startElement()</em>
             does that, it always clears the flag.</p>
            
             <p>Normally, SAX drivers would push a new context at the beginning
             of each XML element.  Then they perform a first pass over the
             attributes to process all namespace declarations, making
             <em>ContentHandler.startPrefixMapping()</em> callbacks.
             Then a second pass is made, to determine the namespace-qualified
             names for all attributes and for the element name.
             Finally all the information for the
             <em>ContentHandler.startElement()</em> callback is available,
             so it can then be made.</p>
            
             <p>The Namespace support object always starts with a base context
             already in force: in this context, only the "xml" prefix is
             declared.</p>
             <see cref="M:NamespaceSupport.PopContext"/> 
             </summary>
        </member>
        <member name="M:NamespaceSupport.PopContext">
             <summary>
             Revert to the previous Namespace context.
            
             <p>Normally, you should pop the context at the end of each
             XML element.  After popping the context, all Namespace prefix
             mappings that were previously in force are restored.</p>
            
             <p>You must not attempt to declare additional Namespace
             prefixes after popping a context, unless you push another
             context first.</p>
             <see cref="M:NamespaceSupport.PushContext"/>
             </summary>
        </member>
        <member name="M:NamespaceSupport.DeclarePrefix(System.String,System.String)">
             <summary>
             Declare a Namespace prefix.  All prefixes must be declared
             before they are referenced.  For example, a SAX driver (parser)
             would scan an element's attributes
             in two passes:  first for namespace declarations,
             then a second pass using <see cref="M:NamespaceSupport.ProcessName(System.String,System.String[],System.Boolean)"/> to
             interpret prefixes against (potentially redefined) prefixes.
            
             <p>This method declares a prefix in the current Namespace
             context; the prefix will remain in force until this context
             is popped, unless it is shadowed in a descendant context.</p>
            
             <p>To declare the default element Namespace, use the empty string as
             the prefix.</p>
            
             <p>Note that you must <em>not</em> declare a prefix after
             you've pushed and popped another Namespace context, or
             treated the declarations phase as complete by processing
             a prefixed name.</p>
            
             <p>Note that there is an asymmetry in this library: 
             <see cref="M:NamespaceSupport.GetPrefix(System.String)"/> will not return the "" prefix,
             even if you have declared a default element namespace.
             To check for a default namespace,
             you have to look it up explicitly using <see cref="M:NamespaceSupport.GetURI(System.String)"/>.
             This asymmetry exists to make it easier to look up prefixes
             for attribute names, where the default prefix is not allowed.</p>
             <see cref="M:NamespaceSupport.ProcessName(System.String,System.String[],System.Boolean)"/>
             <see cref="M:NamespaceSupport.GetURI(System.String)"/>
             <see cref="M:NamespaceSupport.GetPrefix(System.String)"/>
             </summary>
             <param name="prefix">The prefix to declare, or the empty string to
            	indicate the default element namespace.  This may never have
            	the value "xml" or "xmlns".</param>
             <param name="uri">The Namespace URI to associate with the prefix.</param>
             <returns>true if the prefix was legal, false otherwise</returns>
        </member>
        <member name="M:NamespaceSupport.ProcessName(System.String,System.String[],System.Boolean)">
             <summary>
             Process a raw XML qualified name, after all declarations in the
             current context have been handled by <see cref="M:NamespaceSupport.DeclarePrefix(System.String,System.String)"/>.
            
             <p>This method processes a raw XML qualified name in the
             current context by removing the prefix and looking it up among
             the prefixes currently declared.  The return value will be the
             array supplied by the caller, filled in as follows:</p>
            
             <dl>
             <dt>parts[0]</dt>
             <dd>The Namespace URI, or an empty string if none is
              in use.</dd>
             <dt>parts[1]</dt>
             <dd>The local name (without prefix).</dd>
             <dt>parts[2]</dt>
             <dd>The original raw name.</dd>
             </dl>
            
             <p>All of the strings in the array will be internalized.  If
             the raw name has a prefix that has not been declared, then
             the return value will be null.</p>
            
             <p>Note that attribute names are processed differently than
             element names: an unprefixed element name will receive the
             default Namespace (if any), while an unprefixed attribute name
             will not.</p>
             </summary>
             <param name="qName">The XML qualified name to be processed.</param>
             <param name="parts">An array supplied by the caller, capable of
                    holding at least three members.</param>
             <param name="isAttribute">A flag indicating whether this is an
                    attribute name (true) or an element name (false).</param>
             <returns>The supplied array holding three internalized strings 
                    representing the Namespace URI (or empty string), the
                    local name, and the XML qualified name; or null if there
                    is an undeclared prefix.</returns>
        </member>
        <member name="M:NamespaceSupport.GetURI(System.String)">
             <summary>
             Look up a prefix and get the currently-mapped Namespace URI.
            
             <p>This method looks up the prefix in the current context.
             Use the empty string ("") for the default Namespace.</p>
            
             <see cref="M:NamespaceSupport.GetPrefix(System.String)"/>
             <see cref="M:NamespaceSupport.GetPrefixes"/>
             </summary>
             <param name="prefix">The prefix to look up.</param>
             <returns>The associated Namespace URI, or null if the prefix
                     is undeclared in this context.</returns>
        </member>
        <member name="M:NamespaceSupport.GetPrefixes">
             <summary>
             Return an enumeration of all prefixes whose declarations are
             active in the current context.
             This includes declarations from parent contexts that have
             not been overridden.
            
             <p><strong>Note:</strong> if there is a default prefix, it will not be
             returned in this enumeration; check for the default prefix
             using the <see cref="M:NamespaceSupport.GetURI(System.String)"/> with an argument of "".</p>
            
             @return 
             <see cref="M:NamespaceSupport.GetDeclaredPrefixes"/>
             <see cref="M:NamespaceSupport.GetURI(System.String)"/>
             </summary>
             <returns>An enumeration of prefixes (never empty).</returns>
        </member>
        <member name="M:NamespaceSupport.GetPrefix(System.String)">
             <summary>
             Return one of the prefixes mapped to a Namespace URI.
            
             <p>If more than one prefix is currently mapped to the same
             URI, this method will make an arbitrary selection; if you
             want all of the prefixes, use the <see cref="M:NamespaceSupport.GetPrefixes"/>
             method instead.</p>
            
             <p><strong>Note:</strong> this will never return the empty (default) prefix;
             to check for a default prefix, use the <see cref="M:NamespaceSupport.GetURI(System.String)"/>
             method with an argument of "".</p>    
             <see cref="M:NamespaceSupport.GetPrefixes(System.String)"/>
             <see cref="M:NamespaceSupport.GetURI(System.String)"/>
             </summary>
             <param name="uri">the namespace URI</param>
             <returns>One of the prefixes currently mapped to the URI supplied,
                     or null if none is mapped or if the URI is assigned to
                     the default namespace</returns>
        </member>
        <member name="M:NamespaceSupport.GetPrefixes(System.String)">
             <summary>
             Return an enumeration of all prefixes for a given URI whose
             declarations are active in the current context.
             This includes declarations from parent contexts that have
             not been overridden.
            
             <p>This method returns prefixes mapped to a specific Namespace
             URI.  The xml: prefix will be included.  If you want only one
             prefix that's mapped to the Namespace URI, and you don't care 
             which one you get, use the <see cref="M:NamespaceSupport.GetPrefix(System.String)"/>
              method instead.</p>
            
             <p><strong>Note:</strong> the empty (default) prefix is <em>never</em> included
             in this enumeration; to check for the presence of a default
             Namespace, use the <see cref="M:NamespaceSupport.GetURI(System.String)"/> method with an
             argument of "".</p>
            
             <see cref="M:NamespaceSupport.GetPrefix(System.String)"/>
             <see cref="M:NamespaceSupport.GetDeclaredPrefixes"/>
             <see cref="M:NamespaceSupport.GetURI(System.String)"/>
             </summary>
             <param name="uri">The Namespace URI.</param>
             <returns>An enumeration of prefixes (never empty).</returns>
        </member>
        <member name="M:NamespaceSupport.GetDeclaredPrefixes">
             <summary>
             Return an enumeration of all prefixes declared in this context.
            
             <p>The empty (default) prefix will be included in this 
             enumeration; note that this behaviour differs from that of
             <see cref="M:NamespaceSupport.GetPrefix(System.String)"/> and <see cref="M:NamespaceSupport.GetPrefixes"/>.</p>
            
             <see cref="M:NamespaceSupport.GetPrefixes"/>
             <see cref="M:NamespaceSupport.GetURI(System.String)"/>
             </summary>
             <returns>An enumeration of all prefixes declared in this
                     context.</returns>
        </member>
        <member name="P:NamespaceSupport.NamespaceDeclUris">
            <summary>
            Controls whether namespace declaration attributes are placed
            into the <see cref="F:NamespaceSupport.NSDECL"/> namespace by <see cref="M:NamespaceSupport.ProcessName(System.String,System.String[],System.Boolean)"/>.
            This may only be changed before any contexts have been pushed.
            </summary>
            <remarks>Set tu <c>true</c> if namespace declaration attributes are placed
            into the <see cref="F:NamespaceSupport.NSDECL"/> namespace.</remarks>
            <exception cref="T:System.InvalidOperationException">When attempting to set this
            after any context has been pushed.</exception>
        </member>
        <member name="T:NamespaceSupport.Context">
             <summary>
             Internal class for a single Namespace context.
            
             <p>This module caches and reuses Namespace contexts,
             so the number allocated
             will be equal to the element depth of the document, not to the total
             number of elements (i.e. 5-10 rather than tens of thousands).
             Also, data structures used to represent contexts are shared when
             possible (child contexts without declarations) to further reduce
             the amount of memory that's consumed.
             </p>
             </summary>
        </member>
        <member name="M:NamespaceSupport.Context.#ctor(System.Boolean)">
            <summary>
            Create the root-level Namespace context.
            </summary>
        </member>
        <member name="M:NamespaceSupport.Context.SetParent(NamespaceSupport.Context)">
            <summary>
            (Re)set the parent of this Namespace context.
            The context must either have been freshly constructed,
            or must have been cleared.
            </summary>
            <param name="parent">The parent Namespace context object.</param>
        </member>
        <member name="M:NamespaceSupport.Context.Clear">
            <summary>
            Makes associated state become collectible,
            invalidating this context.
            <see cref="M:NamespaceSupport.Context.SetParent(NamespaceSupport.Context)"/> must be called before
            this context may be used again.
            </summary>
        </member>
        <member name="M:NamespaceSupport.Context.DeclarePrefix(System.String,System.String)">
            <summary>
            Declare a Namespace prefix for this context.
            <see cref="M:NamespaceSupport.DeclarePrefix(System.String,System.String)"/>
            </summary>
            <param name="prefix">The prefix to declare.</param>
            <param name="uri">The associated Namespace URI.</param>
        </member>
        <member name="M:NamespaceSupport.Context.ProcessName(System.String,System.Boolean)">
            <summary>
            Process an XML qualified name in this context.
            </summary>
            <param name="qName">The XML qualified name.</param>
            <param name="isAttribute">true if this is an attribute name.</param>
            <returns>An array of three strings containing the
                    URI part (or empty string), the local part,
                    and the raw name, all internalized, or null
                    if there is an undeclared prefix.</returns>
        </member>
        <member name="M:NamespaceSupport.Context.GetURI(System.String)">
            <summary>
            Look up the URI associated with a prefix in this context.
            <see cref="M:NamespaceSupport.GetURI(System.String)"/>
            </summary>
            <param name="prefix">The prefix to look up.</param>
            <returns>The associated Namespace URI, or null if none is
                    declared.</returns>
        </member>
        <member name="M:NamespaceSupport.Context.GetPrefix(System.String)">
             <summary>
             Look up one of the prefixes associated with a URI in this context.
            
             <p>Since many prefixes may be mapped to the same URI,
             the return value may be unreliable.</p>
             <see cref="M:NamespaceSupport.GetPrefix(System.String)"/>
             </summary>
             <param name="uri">The URI to look up.</param>
             <returns>The associated prefix, or null if none is declared.</returns>
        </member>
        <member name="M:NamespaceSupport.Context.GetDeclaredPrefixes">
            <summary>
            Return an enumeration of prefixes declared in this context.
            <see cref="M:NamespaceSupport.GetDeclaredPrefixes"/>
            </summary>
            <returns>An enumeration of prefixes (possibly empty).</returns>
        </member>
        <member name="M:NamespaceSupport.Context.GetPrefixes">
             <summary>
             Return an enumeration of all prefixes currently in force.
            
             <p>The default prefix, if in force, is <em>not</em>
             returned, and will have to be checked for separately.</p>
             <see cref="M:NamespaceSupport.GetPrefixes"/>
             </summary>
             <returns>An enumeration of prefixes (never empty).</returns>
        </member>
        <member name="M:NamespaceSupport.Context.CopyTables">
             <summary>
             Copy on write for the internal tables in this context.
            
             <p>This class is optimized for the normal case where most
             elements do not contain Namespace declarations.</p>
             </summary>
        </member>
    </members>
</doc>
